# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface RealmAccessProp {
  roles: [String!]!
}

interface UserAccessProp {
  manageGroupMembership: Boolean!
  view: Boolean!
  mapRoles: Boolean!
  impersonate: Boolean!
  manage: Boolean!
}

interface PostTagEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  postId: String!
  tagId: String!
}

interface BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
}

type LoggedUserModel {
  exp: Int!
  iat: Int!
  auth_time: Int!
  jti: String!
  iss: String!
  aud: String!
  sub: String!
  typ: String!
  azp: String!
  session_state: String!
  acr: String!
  allowed_origins: [String!]!
  realm_access: RealmAccessProp!
  scope: String!
  sid: String!
  email_verified: Boolean!
  name: String!
  preferred_username: String!
  given_name: String!
  family_name: String!

  """
  the id of logged user. It was called id to be more intuitive but is the same as sub property
  """
  id: String!
}

type UserModel {
  id: ID!
  createdTimestamp: Int!
  username: String!
  enabled: Boolean!
  totp: Boolean!
  email: String!
  emailVerified: Boolean!
  firstName: String!
  lastName: String!
  disableableCredentialTypes: [String!]!
  requiredActions: [String!]!
  notBefore: Int!
  access: UserAccessProp!
}

type ProfileEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  image: String
  bio: String
  firstName: String
  lastName: String
  comments: [CommentEntity!]!
  posts: [PostEntity!]!
  userId: String!
  user: LoggedUserModel
}

type CommentEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  content: String!
  authorId: String!
  author: ProfileEntity
  postId: String!
  post: PostEntity
}

type TagEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  name: String!
  posts: [PostEntity!]!
  PostTagEntity: PostTagEntity
}

type PostEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  title: String!
  content: String!
  mainImage: String!
  images: String
  type: PostType!
  published: Boolean!
  authorId: String!
  author: ProfileEntity
  categoryId: String!
  category: CategoryEntity
  tags: [TagEntity!]!
  comments: [CommentEntity!]!
  PostTagEntity: PostTagEntity
}

enum PostType {
  TEXT
  GALLERY
  PAGE
}

type CategoryEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  name: String!
  parentId: String
  parent: CategoryEntity
  subcategories: [CategoryEntity!]!
  posts: [PostEntity!]!
}

type ProductCategoryEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  name: String!
  profit: Float!
  products: [ProductEntity!]!
}

type StockEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  price: JSON!
  quantity: Float!
  type: StockType!
  priceHistory: JSON!
  productId: String!
  product: ProductEntity
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum StockType {
  ONSITE
  ONLINE
}

type ProductEntity implements BaseEntity {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  name: String!
  images: String!
  size: ProductSize!
  description: String!
  available: Boolean!
  status: ProductStatus!
  productCategoryId: String!
  productCategory: ProductCategoryEntity
  stocks: [StockEntity!]!
}

enum ProductSize {
  BIG
  MEDIUM
  SMALL
}

enum ProductStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

input ProductCategoryEntityInput {
  name: String!
  profit: Float!
  products: [ProductEntityInput!]!
}

input StockEntityInput {
  price: JSON!
  quantity: Float!
  type: StockType!
  priceHistory: JSON!
  productId: String!
  product: ProductEntityInput
}

input ProductEntityInput {
  name: String!
  images: String!
  size: ProductSize!
  description: String!
  available: Boolean!
  status: ProductStatus!
  productCategoryId: String!
  productCategory: ProductCategoryEntityInput
  stocks: [StockEntityInput!]!
}

type Query {
  """Returns a list of users"""
  users: [UserModel!]!

  """Returns the user that match with the provided id"""
  user(id: ID!): UserModel!

  """Returns the total count of all users by criteria"""
  usersCount: Int!

  """Returns a list of products"""
  products(query: ProductQueryInput): [ProductEntity!]!

  """
  Returns the product that match with the given id or NULL if nothing matches
  """
  product(id: String!): ProductEntity!

  """Returns the total count of all products by criteria"""
  productsCount: Int!
}

input ProductQueryInput {
  pageSize: Float
  pageIndex: Float
  order: [String!]
  filter: ProductEntityInput
}

type Mutation {
  """Create and return a new user"""
  createUser(createUserDto: CreateUserDto!): UserModel!

  """Create and return a new product"""
  createProduct(createProductDto: CreateProductDto!): ProductEntity!

  """Overwrite and return the updated product"""
  overwriteProduct(productId: String!, updateProductDto: UpdateProductDto!): ProductEntity!

  """Update and return the updated product"""
  updateProduct(productId: String!, patchProductDto: PatchProductDto!): ProductEntity!

  """Remove the product if exist or return null otherwise"""
  removeProduct(productId: String!): ProductEntity!
}

"""Data needed to create a new user"""
input CreateUserDto {
  email: String!
  password: String!
  username: String
  firstName: String
  lastName: String
  requiredActions: [String!]
  emailVerified: Boolean
  groups: [String!]
  enabled: Boolean
}

"""data required to create a new product"""
input CreateProductDto {
  name: String!
  images: String!
  description: String!
  available: Boolean!
  productCategoryId: String!
}

input UpdateProductDto {
  name: String!
  images: String!
  description: String!
  available: Boolean!
  productCategoryId: String!
}

input PatchProductDto {
  name: String!
  images: String!
  description: String!
  available: Boolean!
  productCategoryId: String!
}