include api_keys.conf;
include cors.conf;

server {
  listen 80;
  server_name starter.io www.starter.io;
  return 301 https://$server_name$request_uri;
}

server {
  listen 80;
  server_name app.starter.io www.app.starter.io;
  return 301 https://$server_name$request_uri;
}

server {
  listen 80;
  server_name auth.starter.io www.auth.starter.io;
  return 301 https://$server_name$request_uri;

  location /admin/ {
    return 301 https://$server_name$request_uri;
  }

  location /realms/ {
    return 301 https://$server_name$request_uri;
  }
}

server {
  access_log /var/log/nginx/api_access.log main; # Each API may also log to a separate file
  listen 443 ssl;
  server_name starter.io www.starter.io;

  # TLS config
  ssl_certificate /etc/ssl/certs/starter.io.crt;
  ssl_certificate_key /etc/ssl/certs/starter.io.key;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;
  ssl_ciphers HIGH:!aNULL:!MD5;
  ssl_protocols TLSv1.2 TLSv1.3;

  # API definitions, one per file
  include api_conf.d/default_api.conf;

  # Error responses
  error_page 404 = @400; # Invalid paths are treated as bad requests
  proxy_intercept_errors on; # Do not send backend errors to the client
  include api_json_errors.conf; # API client friendly JSON error responses
  default_type application/json; # If no content-type then assume JSON

  # API key validation
  location = /_validate_apikey {
    internal;
    if ($http_x_apikey = "") {
      return 401; # Unauthorized
    }
    if ($api_client_name = "") {
      return 403; # Forbidden
    }
    return 204; # OK (no content)
  }
}

server {
  access_log /var/log/nginx/api_access.log main; # Each API may also log to a separate file
  listen 443 ssl;
  server_name app.starter.io www.app.starter.io;

  # TLS config
  ssl_certificate /etc/ssl/certs/starter.io.crt;
  ssl_certificate_key /etc/ssl/certs/starter.io.key;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;
  ssl_ciphers HIGH:!aNULL:!MD5;
  ssl_protocols TLSv1.2 TLSv1.3;

  # Set Headers for Keycloak in a reverse proxy
  # https://www.keycloak.org/server/reverseproxy
  # https://itnext.io/nginx-as-reverse-proxy-in-front-of-keycloak-21e4b3f8ec53
  proxy_set_header X-Forwarded-For $proxy_protocol_addr; # To forward the original client's IP address
  proxy_set_header X-Forwarded-Proto $scheme; # to forward the original protocol (HTTP or HTTPS)
  proxy_set_header X-Forwarded-Host $host; # to forward the original host requested by the client
  proxy_set_header X-Forwarded-Port $server_port; # to forward the server port is nginx is exposed in a different por outside the container here should be the same
  proxy_set_header X-Real-IP $proxy_protocol_addr; # Original client's IP address
  proxy_set_header Host $host; # to forward the original host requested by the client

  add_header 'Access-Control-Allow-Origin' $cors_origin_header always;
  add_header 'Access-Control-Allow-Credentials' $cors_cred always;
  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
  add_header 'Access-Control-Allow-Headers' "Origin, X-Requested-With, Content-Type, Accept, X-Apikey, Authorization" always;

  if ($request_method = 'OPTIONS' ) {
    return 204 no-content;
  }

  # API definitions, one per file
  include api_conf.d/app_api.conf;

  # Error responses
  # error_page 404 = @400; # Invalid paths are treated as bad requests
  # proxy_intercept_errors on; # Do not send backend errors to the client
  include api_json_errors.conf; # API client friendly JSON error responses
  default_type application/json; # If no content-type then assume JSON

  # API key validation
  location = /_validate_apikey {
    internal;
    if ($http_x_apikey = "") {
      return 401; # Unauthorized
    }
    if ($api_client_name = "") {
      return 403; # Forbidden
    }
    return 204; # OK (no content)
  }
}

server {
  access_log /var/log/nginx/api_access.log main; # Each API may also log to a separate file
  include /etc/nginx/mime.types;
  listen 443 ssl;
  server_name auth.starter.io www.auth.starter.io;

  # TLS config
  ssl_certificate /etc/ssl/certs/starter.io.crt;
  ssl_certificate_key /etc/ssl/certs/starter.io.key;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;
  ssl_ciphers HIGH:!aNULL:!MD5;
  ssl_protocols TLSv1.2 TLSv1.3;

  # Security Headers
  # https://itnext.io/nginx-as-reverse-proxy-in-front-of-keycloak-21e4b3f8ec53
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self' https://auth.starter.io http://localhost:8080; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src https://auth.starter.io; font-src 'self' https://fonts.gstatic.com; frame-src 'unsafe-inline' 'self' https://auth.starter.io http://localhost:8080 none;";
  # add_header X-Content-Type-Options nosniff; # cannot apply now because of open keycloak issue https://issues.redhat.com/browse/KEYCLOAK-17076
  add_header X-XSS-Protection: "1; mode=block";

  # Set Headers for Keycloak in a reverse proxy
  # https://www.keycloak.org/server/reverseproxy
  # https://itnext.io/nginx-as-reverse-proxy-in-front-of-keycloak-21e4b3f8ec53
  proxy_set_header X-Forwarded-For $proxy_protocol_addr; # To forward the original client's IP address
  proxy_set_header X-Forwarded-Proto $scheme; # to forward the original protocol (HTTP or HTTPS)
  proxy_set_header X-Forwarded-Host $host; # to forward the original host requested by the client
  proxy_set_header X-Forwarded-Port $server_port; # to forward the server port is nginx is exposed in a different por outside the container here should be the same
  proxy_set_header X-Real-IP $proxy_protocol_addr; # Original client's IP address
  proxy_set_header Host $host; # to forward the original host requested by the client
  proxy_pass_header Set-Cookie;

  # API definitions, one per file
  include api_conf.d/auth_api.conf;

  # Error responses
  # error_page 404 = @400; # Invalid paths are treated as bad requests
  # proxy_intercept_errors on; # Do not send backend errors to the client
  include api_json_errors.conf; # API client friendly JSON error responses
  default_type application/json; # If no content-type then assume JSON

  # API key validation
  location = /_validate_apikey {
    internal;
    if ($http_x_apikey = "") {
      return 401; # Unauthorized
    }
    if ($api_client_name = "") {
      return 403; # Forbidden
    }
    return 204; # OK (no content)
  }
}
