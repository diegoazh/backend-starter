#!/bin/sh
# https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/

reset="\e[0m"

# Text settings.
bold="\e[1m"
underline="\e[4m"

# Text color.
gray="\e[30m"
red="\e[31m"
green="\e[32m"
yellow="\e[33m"
blue="\e[34m"
magenta="\e[35m"
cyan="\e[36m"
white="\e[37m"

# Text color with bold font.
bgray="\e[1;30m"
bred="\e[1;31m"
bgreen="\e[1;32m"
byellow="\e[1;33m"
bblue="\e[1;34m"
bmagenta="\e[1;35m"
bcyan="\e[1;36m"
bwhite="\e[1;37m"

# Background color.
bg_gray="\e[40m"
bg_red="\e[41m"
bg_green="\e[42m"
bg_yellow="\e[43m"
bg_blue="\e[44m"
bg_magenta="\e[45m"
bg_cyan="\e[46m"
bg_white="\e[47m"

# Background color with bold font.
bg_gray="\e[1;40m"
bg_red="\e[1;41m"
bg_green="\e[1;42m"
bg_yellow="\e[1;43m"
bg_blue="\e[1;44m"
bg_magenta="\e[1;45m"
bg_cyan="\e[1;46m"
bg_white="\e[1;47m"

if [ "$#" -ne 1 ]; then
  printf "${red}ERROR: you need to supply a domain as an argument eg: ${white}\$${green}bash${reset} ${underline}.generate-certificates${reset} ${white}domain.com${reset}\n"
  exit 1
fi

domain=$1

printf "${yellow}- creating certs folder to save .key and .pem files${reset}\n"
mkdir ./certs

printf "${yellow}- creating our own certificate authority .key${reset}\n"
openssl genrsa -des3 -out ./certs/myCA.key 2048

printf "${yellow}- creating our own certificate authority .pem${reset}\n"
openssl req -x509 -new -nodes -key ./certs/myCA.key -sha256 -days 1825 -out ./certs/myCA.pem

printf "${yellow}- creating our own rsa .key domain to generate the ssl certificate${reset}\n"
openssl genrsa -out "${domain}.key" 2048

printf "${yellow}- creating our own .csr file to generate the ssl certificate${reset}\n"
openssl req -new -key "${domain}.key" -out "${domain}.csr"

printf "${yellow}- creating our own .ext file to generate the ssl certificate${reset}\n"
cat <<EOF >"${domain}.ext"
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = ${domain}
DNS.2 = *.${domain}
EOF

printf "${yellow}- generate our own .crt file of the ssl certificate${reset}\n"
openssl x509 -req -in ./${domain}.csr -CA ./certs/myCA.pem -CAkey ./certs/myCA.key \
  -CAcreateserial -out ./${domain}.crt -days 825 -sha256 -extfile ./${domain}.ext

printf "${yellow}- to finish please go to this ${green}${underline}(https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/#installing-root-cert-app)${reset} ${yellow}and follow the steps to add the new pem file to your trusted certificates in your computer${reset}\n"
